# say a happy hello!
if [[ $EUID -eq 0 ]]; then
    printf "\n       \\               ♥*♥*♥*♥*♥*♥*♥*♥*♥\n        \ji            ♥ Hello Roooot! ♥\n        /.(((          ♥*♥*♥*♥*♥*♥*♥*♥*♥\n       (,/\"(((__,--. \n           \  ) _( /{  \n           !|| \" :||    \n           !||   :||  \n           '''   '''  \n  "
elif [ -z "$(command -v lolcat)" ]; then
    printf "\n       \\               ♥ ♥ ♥ ♥ ♥ ♥ ♥ ♥ ♥\n        \ji            ♥ Happy Coding! ♥\n        /.(((          ♥ ♥ ♥ ♥ ♥ ♥ ♥ ♥ ♥\n       (,/\"(((__,--. \n           \  ) _( /{  \n           !|| \" :||    \n           !||   :||  \n           '''   '''  \n  "
else
    printf "\n       \\               ♥ ♥ ♥ ♥ ♥ ♥ ♥ ♥ ♥\n        \ji            ♥ Happy Coding! ♥\n        /.(((          ♥ ♥ ♥ ♥ ♥ ♥ ♥ ♥ ♥\n       (,/\"(((__,--. \n           \  ) _( /{  \n           !|| \" :||    \n           !||   :||  \n           '''   '''  \n  " | lolcat --freq=1
fi



if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
        RED=$(tput setaf 160)
        WHITE=$(tput setaf 0)
        VIOLETT=$(tput setaf 201)
        CYAN=$(tput setaf 110)
        GREEN=$(tput setaf 82)
        YELLOW=$(tput setaf 226)
        ORANGE=$(tput setaf 172)
    else
        RED=$(tput setaf 1)
        WHITE=$(tput setaf 7)
        VIOLETT=$(tput setaf 5)
        CYAN=$(tput setaf 6)
        GREEN=$(tput setaf 2)
        YELLOW=$(tput setaf 3)
        ORANGE=$WHITE
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)

else
    RED="\033[0;31m"
    WHITE="\033[1;37m"
    VIOLETT="\033[1;35m"
    CYAN="\033[1;36m"
    GREEN="\033[1;32m"
    ORANGE="\033[1;33m"

    BOLD=""
    RESET="\033[m"
fi

PREP_COLOR=$WHITE
USER_COLOR=$VIOLETT
LOC_COLOR=$CYAN
FOLDER_COLOR=$GREEN
BRANCH_COLOR=$YELLOW
FILES_COUNT_COLOR=$ORANGE

export PREP_COLOR
export USER_COLOR
export LOC_COLOR
export FOLDER_COLOR
export BRANCH_COLOR
export FILES_COUNT_COLOR
export BOLD
export RESET


function parse_git_dirty() {
    [[ $(git status 2> /dev/null | tail -n1) != *"working directory clean"* ]] && echo "*"
}

function parse_git_branch() {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

function get_file_count () {
    ls -1 | wc -l
}

if [[ $EUID -eq 0 ]]; then
    export PS1="\[${BOLD}${USER_COLOR}\]\u \[$PREP_COLOR\]at \[$LOC_COLOR\]\h \[$PREP_COLOR\]in \[$FOLDER_COLOR\]\w\[$PREP_COLOR\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$BRANCH_COLOR\]\$(parse_git_branch)\[$FILES_COUNT_COLOR\] (\$(get_file_count) files)\n\$ \[$RESET\]"
else
    # rainbow theme for awesome users
    export PS1="$(date +"%H:%M") \[${BOLD}${USER_COLOR}\]\u \[$PREP_COLOR\]at \[$LOC_COLOR\]\h \[$PREP_COLOR\]in \[$FOLDER_COLOR\]\w\[$PREP_COLOR\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$BRANCH_COLOR\]\$(parse_git_branch)\[$FILES_COUNT_COLOR\] (\$(get_file_count) files)\n\$ \[$RESET\]"
fi

export PS2="\[$ORANGE\]→ \[$RESET\]"